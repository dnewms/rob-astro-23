---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<div class="accordion border border-gray-200 dark:border-gray-700 rounded-lg mb-4 overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-200">
  <button
    class="flex justify-between items-center w-full p-5 text-left bg-gray-50 dark:bg-arboretumBlue/40 text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-arboretumBlue/60 transition-all duration-200"
    onclick="this.setAttribute('aria-expanded', this.getAttribute('aria-expanded') === 'true' ? 'false' : 'true'); this.querySelector('svg').classList.toggle('rotate-180'); this.nextElementSibling.classList.toggle('hidden')"
    aria-expanded="false"
  >
    <span class="font-medium text-lg font-roboto">{title}</span>
    <svg 
      class="w-5 h-5 transform transition-transform duration-200" 
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24" 
      xmlns="http://www.w3.org/2000/svg"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M19 9l-7 7-7-7"
      ></path>
    </svg>
  </button>
  <div class="hidden">
    <div class="p-6 bg-white dark:bg-arboretumBlue prose dark:prose-invert max-w-none dark:prose-ul:text-white dark:prose-ol:text-white dark:marker:text-white">
      <slot />
    </div>
  </div>
</div>

<style>
  .accordion .button-component {
    @apply bg-umichblue text-white dark:bg-maize dark:text-white hover:bg-umichblue/90 dark:hover:bg-maize/90 transition-colors;
  }

  /* Smooth animation for content */
  .accordion button[aria-expanded="true"] + div {
    @apply block;
  }

  /* Add a subtle border between items when expanded */
  .accordion button[aria-expanded="true"] {
    @apply border-b border-gray-200 dark:border-gray-700;
  }

  /* Add a default bottom border that's transparent */
  .accordion button {
    @apply border-b border-transparent;
  }
</style>
