---
interface Props {
  title: string;
  id: string;
  headingLevel?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
}

const { title, id, headingLevel = 'h3' } = Astro.props;
const HeadingTag = headingLevel;
---

<div class="accordion border-2 border-gray-200 rounded-md mb-4">
  <HeadingTag class="m-0">
    <button
      id={`accordion-button-${id}`}
      class="flex justify-between items-center w-full p-4 text-left bg-white dark:bg-arboretumBlue dark:text-white hover:bg-gray-50 dark:hover:bg-arboretumBlue/80 transition-colors rounded-md"
      aria-expanded="false"
      aria-controls={`accordion-content-${id}`}
    >
      <span class="font-medium">{title}</span>
      <svg 
        class="w-5 h-5 transition-transform" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24" 
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>
  </HeadingTag>
  <div 
    id={`accordion-content-${id}`}
    class="hidden p-4 prose dark:prose-invert max-w-none bg-white dark:bg-arboretumBlue dark:text-white rounded-md"
    role="region"
    aria-labelledby={`accordion-button-${id}`}
  >
    <slot />
  </div>
</div>

<script>
  document.querySelectorAll('.accordion button').forEach(button => {
    button.addEventListener('click', () => {
      const expanded = button.getAttribute('aria-expanded') === 'true' || false;
      button.setAttribute('aria-expanded', !expanded);
      button.querySelector('svg').classList.toggle('rotate-180');
      const content = button.closest('.accordion').querySelector('[role="region"]');
      content.classList.toggle('hidden');
    });
  });
</script>
