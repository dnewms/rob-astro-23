---
import { Icon } from "astro-icon/components";
import { mainNav, addBaseToMenuItems } from '../lib/nav';

const base = import.meta.env.PROD ? import.meta.env.BASE_URL : '/';
const menuItems = addBaseToMenuItems(mainNav);
---

<header class="mt-6 max-w-6xl w-11/12 mx-auto border-b pb-4 border-umichblue dark:border-white h-16 flex justify-between items-center min-w-[200px]">

  <!-- Left Logo -->
  <div class="ml-2 self-end md:ml-0">
    <a href={base} class="block" aria-label="Home - Michigan Robotics Logo">
      <Icon name="roboticsLogo" class="w-32 sm:w-48 h-auto" />
    </a>
  </div>

  <!-- Mobile Menu (details/summary) -->
  <details class="md:hidden">
    <summary class="mt-2 text-2xl sm:text-3xl text-umichblue mr-2 dark:text-maize list-none">&#9776;</summary>
       <nav class="absolute inset-x-0 top-24 border-b-8 border-maize border-double bg-gray-100 z-40 dark:bg-gray-700 pb-8">
        <ul class="flex mx-auto list-none flex-col items-center w-11/12">
            {menuItems.map((menuItem) => (
                <li class="w-full dark:text-white">
                    <div class="flex items-center">
                        <a href={menuItem.uri || '/'} 
                           class="grow pl-2 pr-4 py-3 hover:underline hover:decoration-maize hover:decoration-2"
                           aria-label={menuItem.label}>
                            {menuItem.label}
                        </a>
                        {menuItem.childItems.nodes.length > 0 && (
                            <div>
                             <button class="px-2 py-2 text-umichblue dark:text-maize  hover:bg-gray-300 dark:hover:bg-gray-500 rounded-md border border-gray-500 dark:border-gray-500 mr-1"
        onclick="const details = this.closest('li').querySelector('details'); details.open = !details.open; this.querySelector('.arrow').classList.toggle('rotate-180')">
    <span class="arrow transform transition-transform duration-200">▼</span>
</button>
                            </div>
                        )}
                    </div>
                    {menuItem.childItems.nodes.length > 0 && (
                        <details class="w-full">
                            <summary class="hidden">Toggle Menu</summary>
                            <ul class="pl-6 bg-gray-50 dark:bg-gray-800">
                                {menuItem.childItems.nodes.map((childItem) => (
                                    <li>
                                        <div class="flex items-center">
                                            <a href={childItem.uri || '/'} 
                                               class="grow pl-0 pr-4 py-3 hover:underline hover:decoration-maize hover:decoration-2"
                                               aria-label={childItem.label}>
                                                {childItem.label}
                                            </a>
                                            {childItem.childItems.nodes.length > 0 && (
                                                <div>
                                                   <button class="px-2 py-2 text-umichblue dark:text-maize  hover:bg-gray-300 dark:hover:bg-gray-500 rounded-md border border-gray-500 dark:border-gray-500 mr-1"
        onclick="const details = this.closest('li').querySelector('details'); details.open = !details.open; this.querySelector('.arrow').classList.toggle('rotate-180')">
    <span class="arrow transform transition-transform rotate-180 duration-200">▲</span>
</button>
                                                </div>
                                            )}
                                        </div>
                                        {childItem.childItems.nodes.length > 0 && (
                                            <details>
                                                <summary class="hidden">Toggle Submenu</summary>
                                                <ul class="pl-0 bg-gray-50 dark:bg-gray-800">
                                                    {childItem.childItems.nodes.map((grandChildItem) => (
                                                        <li>
                                                            <a href={grandChildItem.uri || '/'} 
                                                               class="block px-4 py-3 hover:underline hover:decoration-maize hover:decoration-2"
                                                               aria-label={grandChildItem.label}>
                                                                {grandChildItem.label}
                                                            </a>
                                                        </li>
                                                    ))}
                                                </ul>
                                            </details>
                                        )}
                                    </li>
                                ))}
                            </ul>
                        </details>
                    )}
                </li>
            ))}
        </ul>
    </nav>
</details>

  <!-- Desktop Nav -->
  <nav class="hidden md:flex self-end items-center justify-end z-[11]">
    <ul class="flex m-0 p-0 list-none">
        {menuItems.map((menuItem) => (
            <li class="ml-5 relative group">
                <a href={menuItem.uri || '/'} 
                   class="block group-hover:underline underline-offset-4 group-hover:decoration-maize group-hover:decoration-2"
                   aria-label={menuItem.label}>
                    {menuItem.label}
                </a>
                {menuItem.childItems.nodes.length > 0 && (
                    <div class="hidden group-hover:block absolute left-0 mt-2 min-w-[200px]">
                        <ul class="bg-gray-100 dark:bg-gray-500 border border-maize rounded-sm">
                            <li class="triangle"></li>
                            {menuItem.childItems.nodes.map((childItem) => (
                                <li class="relative group/child">
                                    <a href={childItem.uri || '/'} 
                                       class="block px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-600 group-hover/child:underline underline-offset-4 group-hover/child:decoration-maize group-hover/child:decoration-2"
                                       aria-label={childItem.label}>
                                        {childItem.label}
                                    </a>
                                    {childItem.childItems.nodes.length > 0 && (
                                        <ul class="hidden group-hover/child:block absolute left-full top-0 ml-1 min-w-[200px] bg-gray-100 dark:bg-gray-500 border border-maize rounded-sm">
                                            <li class="triangle-right"></li>
                                            {childItem.childItems.nodes.map((grandChildItem) => (
                                                <li>
                                                    <a href={grandChildItem.uri || '/'} 
                                                       class="block px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-600 hover:underline underline-offset-4 hover:decoration-maize hover:decoration-2"
                                                       aria-label={grandChildItem.label}>
                                                        {grandChildItem.label}
                                                    </a>
                                                </li>
                                            ))}
                                        </ul>
                                    )}
                                </li>
                            ))}
                        </ul>
                    </div>
                )}
            </li>
        ))}
    </ul>
</nav>

</header>

<style>
@reference "../styles/global.css";

/* Desktop Hover Mechanics */
@media (min-width: 768px) {
    .group {
      position: relative;
    }
    
    /* Modified hover area extension */
    .group::after {
      content: '';
      position: absolute;
      top: -10px;
      left: -10px;
      right: -10px;
      bottom: -10px;
      z-index: -1;
    }

    /* Keep dropdown in position */
    .group > div {
      pointer-events: auto;
      margin-top: 2px;
      left: 50%;
      transform: translateX(-50%);
    }
    
    .group > div > ul {
      pointer-events: auto;
    }

    /* Show dropdown on hover of extended area */
    .group:hover > div,
    .group > div:hover {
      display: block;
    }

    /* Triangle indicators */
    .triangle {
      position: absolute;
      top: -1px;
      left: 50%;
      z-index: 100;
      transform: translateX(-50%);
      width: 0;
      height: 0;
      border-left: 12px solid transparent;
      border-right: 12px solid transparent;
      border-top: 12px solid var(--color-maize);
    }
    
    .triangle-right {
      position: absolute;
      top: 10px;
      left: -6px;
      z-index: 100;
      width: 0;
      height: 0;
      border-top: 9px solid transparent;
      border-bottom: 9px solid transparent;
      border-left: 9px solid var(--color-maize);
    }
}

  /* Mobile Menu Styling */
  @media (max-width: 767px) {
    /* Menu item with dropdown */
    .mobile-menu-item {
      display: flex;
      items-align: center;
      justify-content: space-between;
      border-bottom: 1px solid var(--border-gray-200);
    }
    :root[class~="dark"] .mobile-menu-item {
      border-color: var(--border-gray-600);
    }

    button.px-4.py-3 {
      background-color: var(--bg-gray-200);
      border-radius: var(--radius-sm);
      margin-left: var(--spacing-2);
    }
    button.px-4.py-3:hover {
      background-color: var(--bg-gray-300);
    }
    :root[class~="dark"] button.px-4.py-3 {
      background-color: var(--bg-gray-600);
    }
    :root[class~="dark"] button.px-4.py-3:hover {
      background-color: var(--bg-gray-500);
    }

    /* Subtle background for child menus */
    .mobile-submenu {
      background-color: var(--bg-gray-50);
    }
    :root[class~="dark"] .mobile-submenu {
      background-color: var(--bg-gray-800);
    }

    /* Mobile menu styles */
    .arrow {
      display: inline-block;
      transition: transform 0.3s ease;
    }

    /* Only target direct summary children of details */
    details > summary > .arrow {
      transition: transform 0.3s ease;
    }

    /* Only affect the immediate arrow of an open details element */
    details[open] > summary > .arrow {
      transform: rotate(180deg);
    }

    /* Remove default arrow from details */
    details > summary {
      list-style: none;
    }
    details > summary::-webkit-details-marker {
      display: none;
    }
  }
</style>
