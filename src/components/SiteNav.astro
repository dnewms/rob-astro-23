---
import { Icon } from "astro-icon"
const base = import.meta.env.PROD ? import.meta.env.BASE_URL : '/';
// Define the navigation structure locally
const mainNav = [
  {
    label: "Academics",
    uri: "/academics",
    childItems: {
      nodes: [
        {
          label: "Undergraduate",
          uri: "/academics/undergraduate",
          childItems: {
            nodes: [
              {
                label: "Program Requirements",
                uri: "/academics/undergraduate/program-requirements",
                childItems: { nodes: [] }
              },
              {
                label: "Advising & Scheduling", 
                uri: "/academics/undergraduate/scheduling",
                childItems: { nodes: [] }
              },
              {
                label: "Pathways Speaker Series",
                uri: "/academics/undergraduate/robotics-pathways-speaker-series",
                childItems: { nodes: [] }
              },
              {
                label: "SUGS",
                uri: "/academics/undergraduate/sugs",
                childItems: { nodes: [] }
              }
            ]
          }
        },
        {
          label: "Graduate",
          uri: "/academics/graduate",
          childItems: {
            nodes: [
              {
                label: "Admissions",
                uri: "/academics/graduate/admissions",
                childItems: { nodes: [] }
              },
              {
                label: "Degree Requirements",
                uri: "/academics/graduate/degree-requirements", 
                childItems: { nodes: [] }
              },
              {
                label: "Advising",
                uri: "/academics/graduate/graduate-advising",
                childItems: { nodes: [] }
              }
            ]
          }
        },
        {
          label: "Courses",
          uri: "/academics/courses",
          childItems: { nodes: [] }
        },
        {
          label: "Current Students",
          uri: "/academics/current-students",
          childItems: { nodes: [] }
        }
      ]
    }
  },
  {
    label: "Research",
    uri: "/research",
    childItems: {
      nodes: [
        {
          label: "Focus Areas",
          uri: "/research/focus-areas",
          childItems: { nodes: [] }
        },
        {
          label: "Datasets and Code",
          uri: "/research/datasets",
          childItems: { nodes: [] }
        }
      ]
    }
  },
  {
    label: "People",
    uri: "/people",
    childItems: {
      nodes: [
        {
          label: "Faculty",
          uri: "/people/faculty",
          childItems: { nodes: [] }
        },
        {
          label: "Staff",
          uri: "/people/staff",
          childItems: { nodes: [] }
        },
        {
          label: "Students",
          uri: "/people/students",
          childItems: { nodes: [] }
        },
        {
          label: "Student Teams",
          uri: "/people/student-teams",
          childItems: { nodes: [] }
        },
        {
          label: "Alumni",
          uri: "/people/alumni",
          childItems: { nodes: [] }
        },
        {
          label: "Advisory Board",
          uri: "/people/robotics-advisory-board",
          childItems: { nodes: [] }
        },
        {
          label: "Honors & Awards",
          uri: "/people/honors-and-awards",
          childItems: { nodes: [] }
        }
      ]
    }
  },
  {
    label: "News & Events",
    uri: "/news",
    childItems: { nodes: [] }
  },
  {
    label: "About",
    uri: "/about",
    childItems: {
      nodes: [
        {
          label: "Values",
          uri: "/about/values",
          childItems: { nodes: [] }
        },
        {
          label: "Media",
          uri: "/about/media",
          childItems: { nodes: [] }
        },
        {
          label: "Building",
          uri: "/about/ford-motor-company-robotics-building",
          childItems: { nodes: [] }
        },
        {
          label: "M-Air",
          uri: "/about/mair",
          childItems: { nodes: [] }
        },
        {
          label: "Faculty Jobs",
          uri: "/about/jobs",
          childItems: { nodes: [] }
        },
        {
          label: "Contact",
          uri: "/about/contact",
          childItems: { nodes: [] }
        }
      ]
    }
  }
];

// Add base URL to all menu items recursively
const addBaseToMenuItems = (items) => {
  return items.map(item => {
    const newItem = {
      ...item,
      uri: `${base.replace(/\/$/, '')}/${item.uri?.replace(/^\//, '')}` || '/'
    };
    
    if (item.childItems?.nodes?.length > 0) {
      newItem.childItems = {
        nodes: addBaseToMenuItems(item.childItems.nodes)
      };
    }
    
    return newItem;
  });
};

const menuItems = addBaseToMenuItems(mainNav);

---

<header class="mt-6 max-w-6xl w-11/12 mx-auto border-b pb-4 border-umichblue dark:border-white h-16 flex justify-between items-center min-w-[200px]">
    <div class="ml-2 self-end md:ml-0">
        <a href="/" class="block">
            <Icon name="roboticsLogo" class="w-32 sm:w-48 h-auto"/>
        </a>
    </div>
    <div id="menu-button" class="block text-2xl sm:text-3xl text-umichblue cursor-pointer mr-2 dark:text-maize md:hidden" aria-expanded="false" aria-controls="main-menu" role="button">&#9776;</div>
    <nav id="main-menu" class="self-end hidden items-center justify-start flex-col fixed inset-x-0 top-24 bottom-0 border-b-8 border-maize border-double bg-gray-100 z-40 dark:bg-gray-700 md:flex md:flex-row md:border-none md:static md:justify-end md:bg-transparent md:-mb-1 transition-all duration-300">
        <ul class="flex m-0 p-0 px-2 md:px-0 list-none flex-col items-center md:flex-row w-full md:w-auto">
            {menuItems.map((menuItem) => (
                <li class="my-4 dark:text-white md:ml-5 md:my-0 relative group w-full md:w-auto">
                    <div class="flex items-center justify-between px-4 md:px-0">
                        <a href={menuItem.uri || '/'} 
                           class="group-hover:underline group-hover:decoration-maize group-hover:decoration-2 flex-grow">
                            {menuItem.label}
                        </a>
                        {menuItem.childItems.nodes.length > 0 && (
                            <button class="dropdown-button p-2 ml-2 md:hidden rounded-sm bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500" aria-expanded="false" aria-controls={`dropdown-${menuItem.id}`} role="button">
                                <span class="inline-block transition-transform duration-300 text-umichblue dark:text-maize">▼</span>
                            </button>
                        )}
                    </div>
                    {menuItem.childItems.nodes.length > 0 && (
                        <div id={`dropdown-${menuItem.id}`} class="dropdown-content hidden md:block">
                            <ul class="bg-gray-100 dark:bg-gray-700 md:absolute md:left-0 md:mt-2 md:min-w-[200px] rounded md:opacity-0 md:invisible group-hover:opacity-100 group-hover:visible transition-all duration-300" role="menu">
                                <li class="triangle"></li>
                                {menuItem.childItems.nodes.map((childItem) => (
                                    <li class="relative group/child pl-6 md:pl-0">
                                        <div class="flex items-center justify-between px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-600">
                                            <a href={childItem.uri || '/'} 
                                               class="w-full group-hover/child:underline group-hover/child:decoration-maize group-hover/child:decoration-2">
                                                {childItem.label}
                                            </a>
                                            {childItem.childItems.nodes.length > 0 && (
                                                <button class="dropdown-button p-2 ml-2 md:hidden rounded bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500" aria-expanded="false" aria-controls={`dropdown-${childItem.id}`} role="button">
                                                    <span class="inline-block transition-transform duration-300 text-umichblue dark:text-maize">▼</span>
                                                </button>
                                            )}
                                        </div>
                                        {childItem.childItems.nodes.length > 0 && (
                                            <ul id={`dropdown-${childItem.id}`} class="dropdown-content hidden bg-gray-100 dark:bg-gray-700 md:absolute md:left-full md:top-0 md:ml-1 min-w-[200px] rounded md:opacity-0 md:invisible group-hover/child:opacity-100 group-hover/child:visible transition-all duration-300" role="menu">
                                                <li class="triangle-right"></li>
                                                {childItem.childItems.nodes.map((grandChildItem) => (
                                                    <li class="px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-600 pl-8 md:pl-4">
                                                        <a href={grandChildItem.uri || '/'} class="block w-full">
                                                            {grandChildItem.label}
                                                        </a>
                                                    </li>
                                                ))}
                                            </ul>
                                        )}
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </li>
            ))}
        </ul>
    </nav>
</header>

<style>
    @media (max-width: 767px) {
        nav.show-nav {
            @apply flex;
        }
    }
@media (min-width: 768px) {
    .group:hover .dropdown-content {
        @apply block;
    }

    .group\/child:hover .dropdown-content {
        @apply block;
    }

    .group:hover .dropdown-content::before,
    .group\/child:hover .dropdown-content::before {
        @apply content-[''] absolute top-full left-0 w-full h-5;
    }

    .group\/child {
        @apply relative;
    }

    .group\/child:hover::before {
        @apply content-[''] absolute left-full top-0 w-5 h-full;
    }

    .dropdown-content {
        @apply absolute top-full left-0 pt-[10px] rounded-md;
    }

    .group\/child .dropdown-content {
        @apply absolute left-full top-0 mt-0 ml-1;
    }

    .triangle {
        @apply w-0 h-0 absolute -top-[10px] left-5 z-[100];
        border-left: 12px solid transparent;
        border-right: 12px solid transparent;
        border-top: 12px solid #ffcb05;
    }

    .triangle-right {
        @apply w-0 h-0 absolute top-[10px] -left-2 z-[100];
        border-top: 8px solid transparent;
        border-bottom: 8px solid transparent;
        border-left: 8px solid #ffcb05;
    }
}

</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const menuButton = document.getElementById('menu-button');
        const nav = document.querySelector('nav');
        const dropdownButtons = document.querySelectorAll('.dropdown-button');

        // Menu button toggle
        menuButton?.addEventListener('click', () => {
            const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
            menuButton.setAttribute('aria-expanded', !isExpanded);
            nav?.classList.toggle('show-nav');
        });

        // Mobile dropdown functionality
        dropdownButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                if (window.innerWidth < 768) {
                    const parentLi = button.closest('li');
                    const dropdownContent = parentLi?.querySelector('.dropdown-content');
                    const caret = button.querySelector('span');

                    // Close other dropdowns at the same level
                    const siblingDropdowns = parentLi?.parentElement?.querySelectorAll('.dropdown-content:not(.hidden)');
                    siblingDropdowns?.forEach(dropdown => {
                        if (dropdown !== dropdownContent) {
                            dropdown.classList.add('hidden');
                            const otherCaret = dropdown.parentElement?.querySelector('span');
                            if (otherCaret) otherCaret.style.transform = 'rotate(0deg)';
                        }
                    });

                    // Toggle current dropdown
                    dropdownContent?.classList.toggle('hidden');
                    if (caret) {
                        caret.style.transform = dropdownContent?.classList.contains('hidden') 
                            ? 'rotate(0deg)' 
                            : 'rotate(180deg)';
                    }

                    const isExpanded = button.getAttribute('aria-expanded') === 'true';
                    button.setAttribute('aria-expanded', !isExpanded);

                    e.preventDefault();
                    e.stopPropagation();
                }
            });
        });

        // Close dropdowns when clicking outside
        document.addEventListener('click', (e) => {
            if (window.innerWidth < 768) {
                const dropdowns = document.querySelectorAll('.dropdown-content:not(.hidden)');
                dropdowns.forEach(dropdown => {
                    if (!dropdown.contains(e.target)) {
                        dropdown.classList.add('hidden');
                        const caret = dropdown.parentElement?.querySelector('span');
                        if (caret) caret.style.transform = 'rotate(0deg)';
                    }
                });
            }
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            if (window.innerWidth >= 768) {
                const dropdowns = document.querySelectorAll('.dropdown-content');
                dropdowns.forEach(dropdown => {
                    dropdown.classList.remove('hidden');
                    dropdown.classList.add('md:block');
                });
            } else {
                const dropdowns = document.querySelectorAll('.dropdown-content');
                dropdowns.forEach(dropdown => {
                    dropdown.classList.add('hidden');
                });
            }
        });
    });
</script>
