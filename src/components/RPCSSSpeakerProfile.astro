---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import MaizeButton from './MaizeButton.astro';

interface Props {
  image: ImageMetadata;
  imageAlt: string;
  title?: string;
  subtitle: string; // date
  name: string;
  role: string;
  website?: string;
  isExpanded?: boolean;
}

const { image, imageAlt, title = '', subtitle, name, role, website, isExpanded = false } = Astro.props;
---

<div class="speaker-profile my-6 border border-gray-200 dark:border-gray-700 rounded-lg overflow-visible">
  <button 
    class="w-full text-left p-4 bg-gray-50 dark:bg-gray-800 hover:bg-blue-50 dark:hover:bg-gray-600 transition-colors cursor-pointer flex flex-wrap items-center focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-arboretumBlue dark:focus-visible:ring-maize focus-visible:ring-offset-2 dark:focus-visible:ring-offset-gray-900 relative z-10"
    aria-expanded={isExpanded}
    data-speaker-button
  >
    <div class="flex items-center gap-4 w-full sm:w-2/5">
      <div class="w-16 h-16 shrink-0">
        <Image 
          src={image} 
          alt={imageAlt}
          width={256}
          height={256}
          class="rounded-full w-full h-full object-cover not-prose"
        />
      </div>
      <div class="min-w-0">
        <p class="text-gray-600 dark:text-gray-200 text-sm">{subtitle}</p>
        <h3 class="text-xl font-bold dark:text-white mt-0 mb-0 break-words">{name}</h3>
        <p class="italic mt-0 break-words">{role}</p>
      </div>
    </div>
    {title && (
      <div class="w-full sm:w-2/5 mt-0 sm:ml-8">
        <p class="text-xl font-bold text-gray-800 dark:text-gray-100 break-words">{title}</p>
      </div>
    )}
    <div class="shrink-0 ml-auto">
      <svg 
        class="expand-icon w-6 h-6 transform transition-transform duration-200 text-arboretumBlue dark:text-maize" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
        data-expand-icon
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </div>
  </button>

  <div class={`content ${isExpanded ? '' : 'hidden'}`} data-content>
    <div class="p-6 bg-white dark:bg-gray-900">
      <div class="flex flex-col md:flex-row gap-8">
        <div class="md:w-1/4">
          {image && !image.src.toLowerCase().includes('robot-profile') && (
            <Image 
              src={image} 
              alt={imageAlt}
              width={400}
              height={400}
              class="rounded-lg w-full"
            />
          )}
          {website && (
            <MaizeButton 
              href={website}
              text="Visit website"
              target="_blank"
              rel="noopener noreferrer"
              class="mt-4 w-full"
            />
          )}
        </div>
        <div class="md:w-3/4">
          <div class="prose dark:prose-invert max-w-none">
            <slot />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function setupSpeakerProfile() {
    const profiles = document.querySelectorAll('.speaker-profile');
    
    profiles.forEach(profile => {
      const button = profile.querySelector('[data-speaker-button]');
      const content = profile.querySelector('[data-content]');
      const expandIcon = profile.querySelector('[data-expand-icon]') as HTMLElement;
      
      if (button && content && expandIcon) {
        // Function to toggle expansion state
        const toggleExpansion = () => {
          const isExpanded = button.getAttribute('aria-expanded') === 'true';
          const newExpandedState = !isExpanded;
          
          button.setAttribute('aria-expanded', newExpandedState.toString());
          content.classList.toggle('hidden');
          
          // Properly toggle the rotation based on expanded state
          expandIcon.style.transform = newExpandedState ? 'rotate(180deg)' : '';
        };
        
        // Handle click events
        button.addEventListener('click', toggleExpansion);
        
        // Add keyboard support for Enter key
        button.addEventListener('keydown', (e) => {
          const keyEvent = e as KeyboardEvent;
          if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
            e.preventDefault();
            toggleExpansion();
          }
        });
        
        // Set initial state based on aria-expanded attribute
        const initialExpanded = button.getAttribute('aria-expanded') === 'true';
        if (initialExpanded) {
          expandIcon.style.transform = 'rotate(180deg)';
        }
      }
    });
  }

  // Run on initial load
  setupSpeakerProfile();

  // Run on client-side navigation
  document.addEventListener('astro:page-load', setupSpeakerProfile);
</script>

<style>
  .expand-icon {
    transition: transform 0.2s ease-in-out;
  }
</style> 