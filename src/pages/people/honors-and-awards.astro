---
// src/pages/focus-areas/index.astro
import Layout from '../../layouts/MainLayout.astro';
import { Image } from 'astro:assets';
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import PageTitle from "../../components/PageTitle.astro";
import { getAwards } from '../../lib/googleSheets';
import { getFacultyData } from '../../lib/googleSheets';
import { getStaffData } from '../../lib/googleSheets';
import featureImage from '../../images/featured-images/people-honors-and-awards.jpg';
import ogFeatureImage from '../../images/featured-images/og/people-honors-and-awards.jpg';
import Link from '../../components/Link.astro';

const faculty = await getFacultyData();
const staff = await getStaffData();

const awards = await getAwards();

// Match award recipients with profiles
const matchedAwards = awards.map(award => {
  const matchedFaculty = faculty.find(profile => profile.fullName === award.awardRecipient);
  const matchedStaff = staff.find(profile => profile.fullName === award.awardRecipient);
  
  if (matchedFaculty) {
    return {
      ...award,
      profileUrl: `faculty/${matchedFaculty.slug}`,
      profileType: 'faculty'
    };
  } else if (matchedStaff) {
    return {
      ...award,
      profileUrl: `staff/${matchedStaff.slug}`,
      profileType: 'staff'
    };
  } else {
    return {
      ...award,
      profileUrl: null,
      profileType: null
    };
  }
});

---

<Layout title="Honors & Awards | Michigan Robotics" image={ogFeatureImage.src} description="Faculty and staff have been recognized for their achievements in a variety of ways, including awards and fellowships.">
    <Breadcrumbs />
    <PageTitle title="Honors and Awards" image={featureImage} imageAlt="A gigantic U-M flag is waved in the Big House football stadium" />
   
      <div class="prose dark:prose-invert mt-8 mb-4 max-w-6xl w-11/12 mx-auto">
        <h2 class="text-xl font-roboto text-umichblue dark:text-white leading-relaxed font-normal">Recognition for leading innovative initiatives, robust programs, and discovering new paths</h2>
        <p>Michigan Robotics faculty and staff have been recognized for their achievements in a variety of ways, including awards, grants, and fellowships. We are proud of our community members, who earn everything from a NSF Career Award to being elected to the National Academy of Engineering member.</p>
     
          <div class="relative overflow-x-auto shadow-md sm:rounded-lg p-4 not-prose">
            <div class="mb-4">
              <input type="text" id="searchInput" placeholder="Search awards..." 
                class="p-2 border rounded-lg w-full dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
            </div>
            <table class="w-full text-sm text-left text-gray-500 dark:text-gray-200">
              <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-200">
                <tr>
                  <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="name">
                    Award Recipient
                    <span class="ml-1">&#x2195</span>
                  </th>
                  <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="awardYear">
                    Award Year
                    <span class="ml-1">&#x2195</span>
                  </th>
                  <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="award">
                    Award
                    <span class="ml-1">&#x2195</span>
                  </th>
                  <th scope="col" class="px-6 py-3 cursor-pointer" data-sort="awardOrganization">
                    Award Organization
                    <span class="ml-1">&#x2195</span>
                  </th>
                </tr>
              </thead>
              <tbody>
                {matchedAwards.map((award) => (
                  <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                    <td scope="row" class="px-6 py-4">
                      {award.profileUrl ? (
                        <Link href={`/people/${award.profileUrl}`} class="hover:underline">
                          {award.awardRecipient}
                        </Link>
                      ) : (
                        award.awardRecipient
                      )}
                    </td>
                    <td class="px-6 py-4" role="cell">
                      {award.awardYear}
                    </td>
                    <td class="px-6 py-4" role="cell">
                      {award.award}
                    </td>
                    <td class="px-6 py-4" role="cell">
                      {award.awardOrganization}
                    </td>
                  </tr>
                ))}
              </tbody>
              
            </table>
          </div>
        </div>
          <script>
            // Search functionality
            const searchInput = document.getElementById('searchInput');
            const tableRows = document.querySelectorAll('tbody tr');
            
            searchInput.addEventListener('keyup', function(e) {
              const searchTerm = e.target.value.toLowerCase();
              
              tableRows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
              });
            });

            // Sorting functionality
            const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;
            
            const comparer = (idx, asc) => (a, b) => {
              const v1 = getCellValue(a, idx);
              const v2 = getCellValue(b, idx);
              return v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) 
                ? (asc ? 1 : -1) * (Number(v1) - Number(v2))
                : (asc ? 1 : -1) * v1.toString().localeCompare(v2);
            };
            
            document.querySelectorAll('th[data-sort]').forEach(th => {
              let asc = true;
              th.addEventListener('click', () => {
                const table = th.closest('table');
                const tbody = table.querySelector('tbody');
                const columnIndex = Array.from(th.parentNode.children).indexOf(th);
                
                // Update sort indicators
                th.parentNode.querySelectorAll('th').forEach(header => {
                  if (header.querySelector('span')) {
                    header.querySelector('span').textContent = '↕';
                  }
                });
                th.querySelector('span').textContent = asc ? '↑' : '↓';
                
                Array.from(tbody.querySelectorAll('tr'))
                  .sort(comparer(columnIndex, asc))
                  .forEach(tr => tbody.appendChild(tr));
                
                asc = !asc;
              });
            });
          </script>