---
import { getCollection, render } from 'astro:content';
import MainLayout from "../../layouts/MainLayout.astro";
import { Icon } from 'astro-icon/components';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { Image } from 'astro:assets';
import featureImage from '../../images/featured-images/news.jpg';
import { collegeNewsQuery, eventsQuery } from '../../lib/api';
import ContentImage from '../../components/ContentImage.astro';
import Link from '../../components/Link.astro';
import { LinkPreview } from 'astro-embed';



const eventsData = await eventsQuery();


// Helper function to get excerpt
async function getExcerpt(post) {
  try {
    // If there's a manual excerpt, use it
    if (post.data.excerpt) {
      return post.data.excerpt;
    }
    
    // Render the content
    const rendered = await post.render();
    
    // If no rendered content, return empty string
    if (!rendered?.content) {
      console.warn(`No content found for post: ${post.id}`);
      return '';
    }
    
    const content = rendered.content;
    
    // Look for more tag
    if (content.includes('<!--more-->')) {
      return content.split('<!--more-->')[0];
    }
    
    // Fall back to first paragraph
    const paragraphs = content.split('\n\n');
    if (paragraphs.length === 0) return '';
    
    const firstParagraph = paragraphs[0];
    return firstParagraph.length > 200 
      ? firstParagraph.slice(0, 200) + '...'
      : firstParagraph;
      
  } catch (error) {
    console.error(`Error getting excerpt for post ${post.id}:`, error);
    return '';
  }
}

// Get all news posts and sort by date
const allPosts = await getCollection('news');
const posts = allPosts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Split into recent and older posts
const recentPosts = posts.slice(0, 5);
const remainingPosts = posts.slice(5);

// Group remaining posts by category
const postsByCategory = remainingPosts.reduce((acc, post) => {
  const category = post.data.categories?.[0] || 'Uncategorized';
  if (!acc[category]) acc[category] = [];
  acc[category].push(post);
  return acc;
}, {});

// Select up to 8 posts for the older posts section
let selectedOlderPosts = [];
Object.entries(postsByCategory).forEach(([category, posts]) => {
  const postsToAdd = posts.slice(0, 4);
  selectedOlderPosts.push(...postsToAdd);
});

// Sort by date and take only the 8 most recent
selectedOlderPosts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());
selectedOlderPosts = selectedOlderPosts.slice(0, 7);

const collegeNewsItems = await collegeNewsQuery();

---

<MainLayout title="News and Events">
    <div class="max-w-6xl w-11/12 mx-auto py-2">
      <Breadcrumbs />
    </div>
    <div class="mt-4 mb-8 max-w-6xl w-11/12 mx-auto">
      <div class="relative rounded-sm overflow-hidden mb-8 feature-image-container">
        <div class="relative">
          <div class="absolute inset-0">
            <Image 
              src={featureImage} 
              alt="Feature image description"
              width={1200}
              height={115}
              class="w-full h-full object-cover"
            />
          </div>
          <div class="relative">
            <div class="bg-umichblue/70 dark:bg-arboretumBlue/70 backdrop-blur-[2px] p-3 sm:p-4 md:p-8 inline-block">
              <h1 class="text-4xl font-roboto text-white font-bold">
                <div class="relative border-b-4 border-maize leading-relaxed sm:leading-tight">News and events</div>
              </h1>
            </div>
          </div>
        </div>
      </div>
    
    <section id="recent-posts" class="mb-12">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {recentPosts.map(async (post, index) => {
          
          return (
            <Link href={`/news/${new Date(post.data.date).getFullYear()}/${post.id.split('/')[1]}`} 
               class={`group block bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] ${index === 0 ? 'md:col-span-2' : ''}`}>
                <ContentImage 
                  src={post.data.image?.src}
                  alt={post.data.image?.alt || post.data.title}
                  width={1024}
                  height={683}
                  class={`w-full ${index === 0 ? 'h-96' : 'h-48'} object-cover`}
                  loading={`${index < 2 ? 'eager' : 'lazy'}`}
                />
              <div class="p-4">
                <h3 class="text-xl font-roboto font-bold mb-2 text-umichblue dark:text-gray-100 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">{post.data.title}</h3>
                <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400 mb-4">
                  {new Date(post.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                </p>
                <p class="text-gray-600 dark:text-gray-200 mb-4" set:html={getExcerpt(post)} />
              </div>
            </Link>
          );
        })}
      </div>
    </section>
    {eventsData.length > 0 && (
    <section id="events" class="mb-12">
      <div class="grid grid-cols-1 sm:flex sm:flex-row sm:gap-6">
        {eventsData.slice(0,4).map((event, index) => (
          <a href={event.permalink} class={`group bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col mb-6 last:mb-0 sm:mb-0 sm:flex-1 ${index !== 0 ? 'sm:ml-6' : ''}`}>
            <div class="relative">
              <span class="absolute top-2 left-0 text-xs font-medium px-4 py-1 bg-matthaeiViolet text-white shadow-md">
                upcoming event
              </span>
            </div>
            <Image 
              src={event.styled_images.event_feature_large}
              alt={event.image_description || "Event image"}
              width={1024}
              height={683}
              class="w-full h-48 object-cover"
            />
            <div class="p-4 flex-grow flex flex-col justify-between">
              <div>
                <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400 mb-2">
                  <time datetime={event.datetime_start}>
								  {new Date(event.datetime_start.replace(
									/(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})/,
									"$1-$2-$3T$4:$5:$6"
								  )).toLocaleString('en-US', {
									month: 'long',
									day: 'numeric',
									year: 'numeric',
									hour: 'numeric',
									minute: '2-digit',
									hour12: true
								  })}
								</time>   </p>
                <h3 class="text-lg font-roboto font-bold text-umichblue dark:text-gray-100 mb-2 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">
                  {event.event_title}
                  <Icon name="mdi:open-in-new" class="inline w-4 h-4 ml-1" />
                </h3>
                {event.event_subtitle && (
                  <h4 class="text-base font-roboto text-gray-600 dark:text-gray-300 mb-2">{event.event_subtitle}</h4>
                )}
              </div>
            </div>
          </a>
        ))}
      </div>
    </section>
    )}
    <section id="older-posts" class="mb-12">
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {selectedOlderPosts.slice(0, 4).map(async (post) => {
          return (
            <Link href={`/news/${new Date(post.data.date).getFullYear()}/${post.id.split('/')[1]}`} 
               class="group bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col">
                <ContentImage 
                  src={post.data.image?.src}
                  alt={post.data.image?.alt || post.data.title}
                  width={1024}
                  height={683}
                  class="w-full h-48 object-cover hidden sm:block"
                />
              <div class="p-4 flex-grow flex flex-col justify-between">
                <div>
                  <span class="inline-block text-xs font-medium mr-2 px-2.5 py-0.5 rounded-sm bg-arboretumBlue text-white mb-2">
                    {(post.data.categories?.[0] || 'Robotics').replace(/-/g, ' ')}
                  </span>
                  <h3 class="text-lg font-roboto font-bold text-umichblue dark:text-gray-100 mb-2 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">{post.data.title}</h3>
                  <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400">
                    {new Date(post.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                  </p>
                </div>
              </div>
            </Link>
          );
        })}
        
        <div class="group bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col">
          <div class="w-full h-20 bg-umichblue dark:bg-arboretumBlue flex items-center justify-center hidden sm:flex">
            <Icon name="mdi:email-newsletter" class="text-[3rem] text-white" />
          </div>
          <div class="p-4 flex-grow flex flex-col justify-between">
            <div>
              <span class="inline-block text-xs font-medium mr-2 px-2.5 py-0.5 rounded-sm bg-arboretumBlue text-white mb-2">
                substack newsletter
              </span>
                <div class="w-full">
<LinkPreview id="https://umrobotics.substack.com/" />
              </div>
            </div>
          </div>
        </div>

        {selectedOlderPosts.slice(4).map(async (post) => {
          return (
            <Link href={`/news/${new Date(post.data.date).getFullYear()}/${post.id.split('/')[1]}`} 
               class="group bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col">
                <ContentImage 
                  src={post.data.image?.src}
                  alt={post.data.image?.alt || post.data.title}
                  width={1024}
                  height={683}
                  class="w-full h-48 object-cover hidden sm:block"
                />
              <div class="p-4 flex-grow flex flex-col justify-between">
                <div>
                  <span class="inline-block text-xs font-medium mr-2 px-2.5 py-0.5 rounded-sm bg-arboretumBlue text-white mb-2">
                    {(post.data.categories?.[0] || 'Robotics').replace(/-/g, ' ')}
                  </span>
                  <h3 class="text-lg font-roboto font-bold text-umichblue dark:text-gray-100 mb-2 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">{post.data.title}</h3>
                  <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400">
                    {new Date(post.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                  </p>
                </div>
              </div>
            </Link>
          );
        })}
        
        {collegeNewsItems && collegeNewsItems.length > 0 && collegeNewsItems.map((newsItem) => (
          <a href={newsItem.COLLEGE_LINK} class="group bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col">
            <div class="p-4 flex-grow flex flex-col justify-between">
              <div>
                <span class="inline-block text-xs font-medium mr-2 px-2.5 py-0.5 rounded-sm border-arboretumBlue border-2 bg-white text-arboretumBlue mb-2">
                  college news
                </span>
                <h3 class="text-lg font-roboto font-bold text-umichblue dark:text-gray-100 mb-2 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">
                  <span set:html={newsItem.COLLEGE_TITLE} />
                  <Icon name="mdi:open-in-new" class="inline w-4 h-4 ml-1" />
                </h3>
                <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400">
                  {new Date(newsItem.COLLEGE_PUB_DATE).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                </p>
              </div>
            </div>
          </a>
        ))}
      </div>
    </section>
  </div>
</MainLayout>

<style>
  /* Add these styles */
  h1, h2, h3 {
    font-display: swap;
  }

</style>
