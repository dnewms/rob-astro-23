---
import { getCollection } from 'astro:content';
import MainLayout from "../../layouts/MainLayout.astro";
import Icon from 'astro-icon';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { Image } from 'astro:assets';
import featureImage from '../../images/featured-images/news.jpg';
import { collegeNewsQuery, eventsQuery } from '../../lib/api';

const eventsData = await eventsQuery();
// Helper function to get excerpt
function getExcerpt(post) {
  // First check for frontmatter excerpt
  if (post.data.excerpt) {
    return post.data.excerpt;
  }
  
  if (post.body.includes('<!--more-->')) {
    return post.body.split('<!--more-->')[0];
  } else {
    const firstParagraph = post.body.split('\n\n')[0];
    return firstParagraph.length > 200 
      ? firstParagraph.slice(0, 200) + '...'
      : firstParagraph;
  }
}

// Get all news posts and sort by date
const allPosts = await getCollection('news');
const posts = allPosts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Split into recent and older posts
const recentPosts = posts.slice(0, 5);
const remainingPosts = posts.slice(5);

// Group remaining posts by category
const postsByCategory = remainingPosts.reduce((acc, post) => {
  const category = post.data.categories?.[0] || 'Uncategorized';
  if (!acc[category]) acc[category] = [];
  acc[category].push(post);
  return acc;
}, {});

// Select up to 8 posts for the older posts section
let selectedOlderPosts = [];
let usedCategories = new Set();

// First pass: take up to 4 posts from each category
Object.entries(postsByCategory).forEach(([category, posts]) => {
  const postsToAdd = posts.slice(0, 4);
  selectedOlderPosts.push(...postsToAdd);
  usedCategories.add(category);
});

// Sort by date and take only the 8 most recent
selectedOlderPosts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());
selectedOlderPosts = selectedOlderPosts.slice(0, 8);

// Transform recent posts
const transformedRecentPosts = await Promise.all(recentPosts.map(async (post) => {
  let imageData = null;
  if (post.data.image) {
    try {
      const imageName = post.data.image.src.replace('images/', '');
      imageData = {
        node: {
          image: import(`../../content/news/${post.data.date.split('-')[0]}/images/${imageName}`),
          altText: post.data.image.alt
        }
      };
    } catch (e) {
      console.error(`Failed to load image for ${post.slug}:`, e);
    }
  }

  return {
    ...post,
    title: post.data.title,
    date: post.data.date,
    uri: `${import.meta.env.BASE_URL}news/${post.slug}`,
    excerpt: getExcerpt(post),
    featuredImage: imageData
  };
}));

// Transform older posts
const transformedOlderPosts = await Promise.all(selectedOlderPosts.map(async (post) => {
  let imageData = null;
  if (post.data.image) {
    try {
      const imageName = post.data.image.src.replace('images/', '');
      imageData = {
        node: {
          image: import(`${import.meta.env.BASE_URL}src/content/news/${post.data.date.split('-')[0]}/images/${imageName}`),
          altText: post.data.image.alt
        }
      };
    } catch (e) {
      console.error(`Failed to load image for ${post.slug}:`, e);
    }
  }

  return {
    ...post,
    title: post.data.title,
    date: post.data.date,
    uri: `${import.meta.env.BASE_URL}news/${post.slug}`,
    excerpt: getExcerpt(post),
    featuredImage: imageData,
    categories: {
      nodes: post.data.categories?.map(cat => ({ name: cat })) || []
    }
  };
}));

const collegeNewsItems = await collegeNewsQuery();
---
<MainLayout title="News and Events">
    <div class="max-w-6xl w-11/12 mx-auto py-2">
      <Breadcrumbs />
    </div>
    <div class="mt-4 mb-8 max-w-6xl w-11/12 mx-auto">
      <div class="relative rounded-sm overflow-hidden mb-8">
        <div class="relative">
          <div class="absolute inset-0">
            <Image 
              src={featureImage} 
              alt="Feature image description"
              width={1200}
              height={600}
              class="w-full h-full object-cover"
            />
          </div>
          <div class="relative">
            <div class="bg-umichblue/70 dark:bg-arboretumBlue/70 backdrop-blur-[2px] p-3 sm:p-4 md:p-8 inline-block">
              <h1 class="text-4xl font-roboto text-white font-bold">
                <span class="relative border-b-4 border-maize leading-relaxed sm:leading-tight group-hover:border-maize transition-all duration-300">News and events</span>
              </h1>
            </div>
          </div>
        </div>
      </div>
    
    
    <section id="recent-posts" class="mb-12">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {transformedRecentPosts.map(async (post, index) => {
          const imageModule = post.featuredImage ? await post.featuredImage.node.image : null;
          return (
            <a href={post.uri} class={`group block bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] ${index === 0 ? 'md:col-span-2' : ''}`}>
              {imageModule && (
                <Image 
                  src={imageModule.default}
                  alt={post.featuredImage.node.altText}
                  width={1024}
                  height={683}
                  class={`w-full ${index === 0 ? 'h-96' : 'h-48'} object-cover`}
                />
              )}
              <div class="p-4">
                <h3 class="text-xl font-roboto font-bold mb-2 text-umichblue dark:text-gray-100 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">{post.title}</h3>
                <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400 mb-4">
                    {new Date(post.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                  </p>
                {post.excerpt && (
                  <p class="text-gray-600 dark:text-gray-200 mb-4" set:html={post.excerpt} />
                )}
              </div>
            </a>
          );
        })}
      </div>
    </section><section id="events" class="mb-12">
      <div class="grid grid-cols-1 sm:flex sm:flex-row sm:gap-6">
        {eventsData.slice(0,4).map((event, index) => (
          <a href={event.permalink} class={`group bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col mb-6 sm:mb-0 sm:flex-1 ${index !== 0 ? 'sm:ml-6' : ''}`}>
            <div class="relative">
              <span class="absolute top-2 left-0 text-xs font-medium px-4 py-1 bg-matthaeiViolet text-white shadow-md">
                upcoming event
              </span>
            </div>
            <img 
              src={event.styled_images.event_feature_large}
              alt={event.image_description || "Event image"}
              class="w-full h-48 object-cover"
            />
            <div class="p-4 flex-grow flex flex-col justify-between">
              <div>
                <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400 mb-2">
                  {new Date(event.date_start).toLocaleString('en-US', { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: '2-digit', hour12: true })}
                </p>
                <h3 class="text-lg font-roboto font-bold text-umichblue dark:text-gray-100 mb-2 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">
                  {event.event_title}
                  <Icon name="mdi:open-in-new" class="inline w-4 h-4 ml-1" />
                </h3>
                {event.event_subtitle && (
                  <h4 class="text-base font-roboto text-gray-600 dark:text-gray-300 mb-2">{event.event_subtitle}</h4>
                )}
              </div>
            </div>
          </a>
        ))}
      </div>
    </section>
    
    <section id="older-posts" class="mb-12">
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {transformedOlderPosts.map(async (post) => {
          const imageModule = post.featuredImage ? await post.featuredImage.node.image : null;
          return (
            <a href={post.uri} class="group bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col">
              {imageModule && (
                <Image 
                  src={imageModule.default}
                  alt={post.featuredImage.node.altText}
                  width={1024}
                  height={683}
                  class="w-full h-48 object-cover hidden sm:block"
                />
              )}
              <div class="p-4 flex-grow flex flex-col justify-between">
                <div>
                  <span class="inline-block text-xs font-medium mr-2 px-2.5 py-0.5 rounded-sm bg-arboretumBlue text-white mb-2">
                    {(post.categories.nodes[0]?.name || 'Robotics').replace(/-/g, ' ')}
                  </span>
                  <h3 class="text-lg font-roboto font-bold text-umichblue dark:text-gray-100 mb-2 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">{post.title}</h3>
                  <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400">
                    {new Date(post.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                  </p>
                </div>
              </div>
            </a>
          );
        })}
        
        {collegeNewsItems && collegeNewsItems.length > 0 && collegeNewsItems.map((newsItem) => (
          <a href={newsItem.COLLEGE_LINK} class="group bg-white dark:bg-gray-800 shadow-md rounded-sm overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col">
            <div class="p-4 flex-grow flex flex-col justify-between">
              <div>
                <span class="inline-block text-xs font-medium mr-2 px-2.5 py-0.5 rounded-sm border-arboretumBlue border-2 bg-white text-arboretumBlue mb-2">
                  college news
                </span>
                <h3 class="text-lg font-roboto font-bold text-umichblue dark:text-gray-100 mb-2 border-b-2 border-transparent group-hover:border-maize transition-all duration-300">
                  <span set:html={newsItem.COLLEGE_TITLE} />
                  <Icon name="mdi:open-in-new" class="inline w-4 h-4 ml-1" />
                </h3>
                <p class="text-sm italic font-sans text-gray-600 dark:text-gray-400">
                  {new Date(newsItem.COLLEGE_PUB_DATE).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                </p>
              </div>
            </div>
          </a>
        ))}
      </div>
    </section>
</MainLayout>
