---
import Layout from '../../../../layouts/MainLayout.astro';
import News from '../../../../components/templates/News.astro';
import { getCollection, render } from 'astro:content';
import { components } from '../../../../components/components';

export async function getStaticPaths() {
  const newsEntries = await getCollection('news');
  
  return newsEntries.map(entry => {
    const year = entry.data.date.split('-')[0];
    const slug = entry.id.split('/')[1];
    
    return {
      params: { year, slug },
      props: { entry }
    };
  });
}

const { entry } = Astro.props;
const { Content } = await render(entry);

// Get all focus areas to map categories to titles
const focusAreas = await getCollection('focusAreas');
const categoryTitles = Object.fromEntries(
  focusAreas.map(area => [area.id, area.data.title.toLowerCase()])
);
// Create excerpt for SEO description
const description = entry.data.seoDescription || entry.data.excerpt || `${entry.data.title}`;

// Generate OG image URL
const ogImage = `/_generated-og/${entry.data.date.split('-')[0]}-${entry.id.split('/')[1]}.png`;

// Transform entry data to match Single template's expected node structure
const node = {
  title: entry.data.title,
  date: entry.data.date,
  author: entry.data.author,
  categories: entry.data.categories ? {
    nodes: entry.data.categories.map(cat => ({
      name: cat,
      prettyName: categoryTitles[cat] || cat.replace(/-/g, ' '),
      uri: `/news/${cat}`
    }))
  } : null
};
---

<Layout 
  title={entry.data.title}
  description={description}
  image={ogImage}
>
  <News node={node}>
    <Content slot="content" components={components}/>
  </News>
</Layout>
